//************************************************************// Created by: Elliott Shanks, Will Tanna, and Himanshu Mehru// CSS430, Spring 2014// FInal Project: File System// Directory.java//*************************************************************public class Directory {   private static int maxChars = 30; // max characters of each file name   // Directory entries   private int fsizes[];        // each element stores a different file size.   private char fnames[][];    // each element stores a different file name.   public Directory( int maxInumber ) { // directory constructor      fsizes = new int[maxInumber];     // maxInumber = max files      for ( int i = 0; i < maxInumber; i++ )          fsizes[i] = 0;                 // all file size initialized to 0      fnames = new char[maxInumber][maxChars];      String root = "/";                // entry(inode) 0 is "/"      fsizes[0] = root.length( );        // fsize[0] is the size of "/".      root.getChars( 0, fsizes[0], fnames[0], 0 ); // fnames[0] includes "/"   }   public void bytes2directory( byte data[] ) {       // assumes data[] received directory information from disk       // initializes the Directory instance with this data[]       int offset = 0;       for (int i = 0; i < fsizes.length; i++, offset += 4) {           fsizes[i] = SysLib.bytes2int(data, offset);        }        for (int i = 0; i < fnames.length; i++, offset += maxChars * 2) {        	String fname = new String(data, offset, maxChars * 2);        	fname.getChars(0, fsizes[i], fnames[i], 0);        }   }   public byte[] directory2bytes( ) {      // converts and return Directory information into a plain byte array      // this byte array will be written back to disk      // note: only meaningfull directory information should be converted      // into bytes.      byte[] returnDirectory = new byte[fsizes.length * 4 + fnames.length * maxChars * 2];      byte[] data;      int offset = 0;      for(int i = 0; i < fsizes.length; i++, offset += 4){          SysLib.int2bytes(fsizes[i], returnDirectory, offset);      }      for(int i = 0; i < fnames.length; i++, offset += maxChars * 2){          String fname = new String(fnames[i], 0, fsizes[i]);          data = fname.getBytes();          for(int j = 0; j < data.length; j++){              returnDirectory[offset] = data[j];              offset++;          }      }      return returnDirectory;   }   public short ialloc( String filename ) {      // filename is the one of a file to be created.      // allocates a new inode number for this filename      for(int iNumber = 0; iNumber < fsizes.length; iNumber++){          if(fsizes[iNumber] == 0){              // Might need to have a check for if the filename size is too big, ie bigger than macChars              fsizes[iNumber] = filename.length();              filename.getChars(0, fsizes[iNumber], fnames[iNumber], 0);              return (short)iNumber;          }      }      return -1;   }   public boolean ifree( int iNumber ) {      // deallocates this inumber (inode number)      // the corresponding file will be deleted.      if(iNumber <= 0){          return false;      }      else{          fsizes[iNumber] = 0;          return true;      }   }   public short namei( String filename ) {      // returns the inumber corresponding to this filename      for(int iNumber = 0; iNumber < fsizes.length; iNumber++){          String fname = new String(fnames[iNumber], 0, fsizes[iNumber]);          if(filename.equals(fname)){              return (short)iNumber;          }      }      // Else return -1 because we couldn't find the filename      return -1;   }}